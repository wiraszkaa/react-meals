{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        headers: requestConfig.headers ? requestConfig.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["D:/Projekty/Java/react-meals/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","body","JSON","stringify","headers","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGN,WAAW,CAAC,OAAOO,aAAP,EAAsBC,SAAtB,KAAoC;AAChEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CACxBH,aAAa,CAACI,GADU,EAExB;AACIC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KAD1D;AAEIC,QAAAA,IAAI,EAAEN,aAAa,CAACM,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeR,aAAa,CAACM,IAA7B,CAArB,GAA0D,IAFpE;AAGIG,QAAAA,OAAO,EAAET,aAAa,CAACS,OAAd,GAAwBT,aAAa,CAACS,OAAtC,GAAgD;AAH7D,OAFwB,CAA5B;;AASA,UAAI,CAACP,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AACH,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAvB8B,EAuB5B,EAvB4B,CAA/B;AAyBA,SAAO;AACLD,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKH,CAlCD;;GAAML,O;;AAoCN,eAAeA,OAAf","sourcesContent":["import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(\r\n                requestConfig.url,\r\n                {\r\n                    method: requestConfig.method ? requestConfig.method : 'GET',\r\n                    body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n                    headers: requestConfig.headers ? requestConfig.headers : {},\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            applyData(data);\r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    return {\r\n      isLoading,\r\n      error,\r\n      sendRequest,\r\n    };\r\n}\r\n\r\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}