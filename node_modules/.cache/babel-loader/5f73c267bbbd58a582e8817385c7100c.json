{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projekty\\\\Java\\\\React Course\\\\react-meals-http\\\\src\\\\components\\\\OrderForm\\\\OrderForm.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./OrderForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { useContext } from \"react\";\nimport CartItems from \"../../store/cart-items\";\nimport Modal from \"../UI/Modal/Modal\";\nimport OrderItem from \"./OrderItem/OrderItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrderForm = props => {\n  _s();\n\n  const orderItems = useContext(CartItems).items.map(item => {\n    return /*#__PURE__*/_jsxDEV(OrderItem, {\n      id: item.id,\n      price: item.price,\n      name: item.name,\n      amount: item.amount\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this);\n  });\n  const {\n    value: enteredName,\n    isValid: nameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetNameInput\n  } = useInput(name => name.trim() !== '');\n\n  const validateEmail = email => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  };\n\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetEmailInput\n  } = useInput(validateEmail);\n  let formIsValid = false;\n\n  if (nameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (nameHasError || emailHasError) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail);\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes[\"cart-items\"],\n        children: orderItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes['control-group'],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: nameHasError ? classes['form-control-invalid'] : classes['form-control'],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            value: enteredName,\n            onChange: nameChangeHandler,\n            onBlur: nameInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes['error-text'],\n            children: \"Full Name must not be empty.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: emailHasError ? classes['form-control-invalid'] : classes['form-control'],\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler,\n          onBlur: emailInputBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), emailHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes['error-text'],\n          children: \"Email is invalid.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes['form-actions'],\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !formIsValid,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrderForm, \"kPVthfNXWpVyVnZ7VdnEbtp6fqQ=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = OrderForm;\nexport default OrderForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderForm\");","map":{"version":3,"sources":["D:/Projekty/Java/React Course/react-meals-http/src/components/OrderForm/OrderForm.js"],"names":["classes","useInput","useContext","CartItems","Modal","OrderItem","OrderForm","props","orderItems","items","map","item","id","price","name","amount","value","enteredName","isValid","nameIsValid","hasError","nameHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameInputBlurHandler","reset","resetNameInput","trim","validateEmail","email","String","toLowerCase","match","enteredEmail","emailIsValid","emailHasError","emailChangeHandler","emailInputBlurHandler","resetEmailInput","formIsValid","submitHandler","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import classes from \"./OrderForm.module.css\";\r\nimport useInput from \"../../hooks/use-input\";\r\nimport {useContext} from \"react\";\r\nimport CartItems from \"../../store/cart-items\";\r\nimport Modal from \"../UI/Modal/Modal\";\r\nimport OrderItem from \"./OrderItem/OrderItem\";\r\n\r\n\r\nconst OrderForm = (props) => {\r\n    const orderItems = useContext(CartItems).items.map((item) => {\r\n        return (\r\n            <OrderItem\r\n                key={item.id}\r\n                id={item.id}\r\n                price={item.price}\r\n                name={item.name}\r\n                amount={item.amount}\r\n            />\r\n        );\r\n    });\r\n\r\n    const {\r\n        value: enteredName,\r\n        isValid: nameIsValid,\r\n        hasError: nameHasError,\r\n        valueChangeHandler: nameChangeHandler,\r\n        inputBlurHandler: nameInputBlurHandler,\r\n        reset: resetNameInput,\r\n    } = useInput((name) => name.trim() !== '');\r\n\r\n    const validateEmail = (email) => {\r\n        return String(email)\r\n            .toLowerCase()\r\n            .match(\r\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n            );\r\n    };\r\n\r\n    const {\r\n        value: enteredEmail,\r\n        isValid: emailIsValid,\r\n        hasError: emailHasError,\r\n        valueChangeHandler: emailChangeHandler,\r\n        inputBlurHandler: emailInputBlurHandler,\r\n        reset: resetEmailInput,\r\n    } = useInput(validateEmail);\r\n\r\n    let formIsValid = false;\r\n    if (nameIsValid && emailIsValid) {\r\n        formIsValid = true;\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (nameHasError || emailHasError) {\r\n            return;\r\n        }\r\n\r\n        console.log(enteredName);\r\n        console.log(enteredEmail);\r\n\r\n        resetNameInput();\r\n        resetEmailInput();\r\n    }\r\n\r\n    return (\r\n        <Modal>\r\n            <form onSubmit={submitHandler}>\r\n                <ul className={classes[\"cart-items\"]}>\r\n                    {orderItems}\r\n                </ul>\r\n                <div className={classes['control-group']}>\r\n                    <div className={nameHasError ? classes['form-control-invalid'] : classes['form-control']}>\r\n                        <label htmlFor='name'>Full Name</label>\r\n                        <input\r\n                            type='text'\r\n                            id='name'\r\n                            value={enteredName}\r\n                            onChange={nameChangeHandler}\r\n                            onBlur={nameInputBlurHandler}\r\n                        />\r\n                        {nameHasError && <p className={classes['error-text']}>Full Name must not be empty.</p>}\r\n                    </div>\r\n                </div>\r\n                <div className={emailHasError ? classes['form-control-invalid'] : classes['form-control']}>\r\n                    <label htmlFor='email'>E-Mail Address</label>\r\n                    <input\r\n                        type='text'\r\n                        id='email'\r\n                        value={enteredEmail}\r\n                        onChange={emailChangeHandler}\r\n                        onBlur={emailInputBlurHandler}\r\n                    />\r\n                    {emailHasError && <p className={classes['error-text']}>Email is invalid.</p>}\r\n                </div>\r\n                <div className={classes['form-actions']}>\r\n                    <button disabled={!formIsValid}>Submit</button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default OrderForm;"]},"metadata":{},"sourceType":"module"}